[project]
name = "IVIM-MRI_Code-Collection"  # Replace with your project name
version = "0.1.0"
description = "This IVIM code collection code library is maintained by OSIPI Taskforce 2.4 (currently not available) and aims to collect, test and share open-source code related to intravoxel incoherent motion (IVIM) analysis of diffusion encoded MRI data to be used in research and software development. "

requires-python = ">=3.11"  # Adjust based on your needs
dependencies = [
    "numpy<2",
    "nibabel",
    "torchio",
    "torch",
    "joblib",
    "dipy",
    "scipy",
    "matplotlib",
    "scienceplots",
    "cvxpy",
    "zenodo-get",
    "tqdm",
    "pandas"
]

[project.optional-dependencies]
dev = [
    "coverage",
    "pytest",
    "pytest-json-report",
    "ruff"
]
doc = [
    "sphinx",
    "sphinx_rtd_theme"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src"]


[tool.ruff]
target-version = "py311"
line-length = 120
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["ivim_mri_code_collection"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["src","tests"]
branch = true
parallel = true

[tool.coverage.paths]
src = ["src", "*/IVIM-MRI_Code-Collection/src"]
tests = ["tests", "*/IVIM-MRI_Code-Collection/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
markers = "slow: marks tests as slow (deselect with '-m \"not slow\"')"
addopts =  "-m 'not slow'"

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = ["linux-64", "win-64",]

[tool.pixi.pypi-dependencies]
IVIM-MRI_Code-Collection = { path = ".", editable = true }

[tool.pixi.environments]
default = { solve-group = "default" }
dev = { features = ["dev"], solve-group = "default" }

[tool.pixi.tasks]
dag = "python ./src/pipeline_cli.py "
test = "pytest"
test-cov = "coverage run -m pytest"
combine = "coverage combine"
report = "coverage report"
test-report = "coverage combine && coverage report"
lint = "ruff check ."